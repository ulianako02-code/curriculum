// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log("App.js loaded successfully!");
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded");
    initializeApp();
});

async function initializeApp() {
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        updateCurrentDate();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        renderWeekCalendar();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await loadSchedule();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

function updateCurrentDate() {
    const now = new Date();
    const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    };
    document.getElementById('currentDate').textContent = now.toLocaleDateString('ru-RU', options);
}

function renderWeekCalendar() {
    const calendar = document.getElementById('weekCalendar');
    if (!calendar) {
        console.error("Calendar element not found!");
        return;
    }
    
    console.log("Rendering calendar...");
    calendar.innerHTML = '<div class="day"><div class="day-number">6</div><div class="day-name">–°—Ä</div></div>';
}

function createDayElement(date, currentDate) {
    const day = document.createElement('div');
    day.className = 'day';
    
    const dayNumber = date.getDate();
    const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    const dayName = dayNames[date.getDay()];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    if (dayNumber === currentDate) {
        day.classList.add('current-day');
    } else if (dayNumber < currentDate) {
        day.classList.add('past-day');
    } else {
        day.classList.add('future-day');
    }
    
    day.innerHTML = `
        <div class="day-number">${dayNumber}</div>
        <div class="day-name">${dayName}</div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    day.addEventListener('click', () => {
        selectDate(date);
    });
    
    return day;
}

async function loadSchedule() {
    try {
        showLoading();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const now = Date.now();
        if (!scheduleData || !lastFetchTime || (now - lastFetchTime) > CONFIG.CACHE_DURATION) {
            await fetchScheduleData();
        }
        
        displayScheduleForDate(new Date());
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function fetchScheduleData() {
    try {
        const formData = new URLSearchParams();
        for (const key in CONFIG.REQUEST_BODY) {
            formData.append(key, CONFIG.REQUEST_BODY[key]);
        }
        
        const response = await fetch(CONFIG.API_URL, {
            method: 'POST',
            headers: CONFIG.REQUEST_HEADERS,
            body: formData
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        scheduleData = await response.json();
        lastFetchTime = Date.now();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

function displayScheduleForDate(date) {
    const scheduleContent = document.getElementById('scheduleContent');
    const scheduleTitle = document.getElementById('scheduleTitle');
    
    if (!scheduleData || !scheduleData.records) {
        scheduleContent.innerHTML = '<div class="error-message">–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã</div>';
        return;
    }
    
    const dateStr = date.toLocaleDateString('ru-RU');
    scheduleTitle.textContent = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}`;
    
    const daySchedule = scheduleData.records.filter(record => {
        const recordDate = parseDate(record.r2);
        return recordDate && recordDate.toDateString() === date.toDateString();
    });
    
    if (daySchedule.length === 0) {
        scheduleContent.innerHTML = `
            <div class="no-classes">
                <h3>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ</h3>
                <p>–ù–∞ ${dateStr} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</p>
            </div>
        `;
        return;
    }
    
    let scheduleHTML = '';
    daySchedule.forEach((lesson, index) => {
        scheduleHTML += `
            <div class="schedule-item">
                <div class="time">${lesson.ptime || '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                <div class="subject">${lesson.D2 || '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                <div class="details teacher">${lesson.prs || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                <div class="details auditorium">${lesson.A2 || '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                <div class="details type">${lesson.LessonType || '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                ${index < daySchedule.length - 1 ? '<div class="divider"></div>' : ''}
            </div>
        `;
    });
    
    scheduleContent.innerHTML = scheduleHTML;
}

function parseDate(dateString) {
    try {
        if (dateString && dateString.startsWith('/Date(')) {
            const timestamp = parseInt(dateString.slice(6, -2));
            return new Date(timestamp);
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', error);
        return null;
    }
}

function selectDate(date) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    document.querySelectorAll('.day').forEach(dayEl => {
        dayEl.classList.remove('current-day');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
    const dayNumber = date.getDate();
    document.querySelectorAll('.day-number').forEach(el => {
        if (parseInt(el.textContent) === dayNumber) {
            el.parentElement.classList.add('current-day');
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    displayScheduleForDate(date);
}

function showLoading() {
    document.getElementById('scheduleContent').innerHTML = `
        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</div>
    `;
}

function showError(message) {
    document.getElementById('scheduleContent').innerHTML = `
        <div class="error-message">
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
            <button onclick="location.reload()" style="
                background: #8b0000;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                margin-top: 10px;
            ">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    `;
}

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('refreshBtn').addEventListener('click', async () => {
        scheduleData = null;
        lastFetchTime = null;
        await loadSchedule();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
    const todayBtn = document.querySelector('.current-day');
    if (todayBtn) {
        todayBtn.addEventListener('dblclick', () => {
            const today = new Date();
            updateCurrentDate();
            renderWeekCalendar();
            displayScheduleForDate(today);
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.refreshSchedule = async function() {
    scheduleData = null;
    lastFetchTime = null;
    await loadSchedule();
};
